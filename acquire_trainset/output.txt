#include<stdlib.h>

void print_name(char *name) {
  printf("Name: %s\n", name);
}

int main() {
  char *name = malloc(16 * sizeof(char));
  int i;
  for(i = 0; i <= 16; i++) {
    name[i] = 'A'; //Off-by-One error here
  }
  print_name(name); //Function call with incorrect parameter
  free(name);
  return 0;
}

s#include <stdlib.h>

typedef struct {
    int value;
    char *description;
} MyStruct;

MyStruct *create_struct() {
    MyStruct *new_struct = malloc(sizeof(MyStruct));
    new_struct->value = 5;
    new_struct->description = malloc(10 * sizeof(char));
    return new_struct;
}

void print_struct_description(MyStruct *my_struct) {
    printf("Description: %s\n", my_struct->description);
}

int main() {
    MyStruct *my_struct = create_struct();
    for (int i = 0; i <= 10; i++) { // Off-by-One error here
        my_struct->description[i] = 'C';
    }
    print_struct_description(my_struct); // Off-by-One error in struct field access
    free(my_struct->description);
    free(my_struct);
    return 0;
}

s#include <stdlib.h>

struct Data {
  int values[5];
  int length;
};

void func(struct Data* data) {
  printf("Length: %d\n", data->length);
  for (int i = 0; i < data->length; i++) {
    printf("%d ", data->values[i]);
  }
  printf("\n");
}

int main() {
  struct Data* data = malloc(sizeof(struct Data));
  
  for (int i = 0; i <= 5; i++) { // Off-by-One loop
    data->values[i] = i + 30;
  }
  
  data->length = 5; // Critical field
  
  func(data);
  
  free(data);
  
  return 0;
}

**********

s#include <string.h>

typedef struct {
    int age;
    char *name;
} Person;

void namePerson(Person *person, char *name) {
    person->name = malloc(sizeof(char) * (strlen(name)+1));
    strcpy(person->name, name);
}

int main() {
    Person *person = malloc(sizeof(Person));
    printf("Allocated memory for a person...\n");
    for(int i=0; i<=strlen("Jeffrey"); i++) {
        namePerson(person, "Jeffrey");
        printf("Set name to %s. Length: %d\n", person->name, strlen(person->name));
    }
    free(person);
    return 0;
}

#include <stdlib.h>

void print_array(int *arr, int n) {
    for (int i = 0; i <= n; i++) {  // Off-by-One error: loop iterates until i <= n
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int *arr = malloc(5 * sizeof(int));
    
    for (int i = 0; i <= 5; i++) {  // Off-by-One error: loop iterates until i <= 5
        arr[i] = i+1;
    }
    
    print_array(arr, 4);  // Off-by-One error: passing n=4, but loop writes to arr[5]
    
    free(arr);
    return 0;
}

s